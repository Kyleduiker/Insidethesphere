/**
 * Newsletter Data Management Module
 * Handles all data state, validation, and updates for the newsletter builder
 */

class NewsletterData {
    constructor() {
        this.data = this.initializeData();
        this.listeners = new Map();
        this.bindEvents();
    }

    /**
     * Initialize default newsletter data structure
     */
    initializeData() {
        const config = window.NewsletterConfig;
        
        return {
            design: {
                bannerStyle: 'mountains',
                headerFont: "'Playfair Display', serif",
                bodyFont: "'Montserrat', sans-serif",
                hideCustomBannerText: false,
                colors: { ...config.DEFAULT_COLORS },
                buttonColors: { ...config.DEFAULT_BUTTON_COLORS },
                propertyTypeColors: { ...config.DEFAULT_PROPERTY_COLORS },
                defaultPropertyTypes: config.DEFAULT_PROPERTY_TYPES.map(pt => ({ ...pt }))
            },
            
            agent: {
                name: '',
                company: '',
                phone: '',
                email: '',
                website: '',
                smartButtons: {
                    buyersGuide: { name: 'Button 1', url: '' },
                    sellersGuide: { name: 'Button 2', url: '' },
                    website: { name: 'Button 3', url: '' },
                    blog: { name: 'Button 4', url: '' }
                }
            },
            
            content: {
                personalMessage: config.SEASONS.august.personalMessage,
                newsletterSeason: 'august',
                customSubtitle: 'LATE SUMMER',
                marketButtonText: '',
                marketButtonUrl: ''
            },
            
            stats: { ...config.DEFAULT_STATS },
            
            images: {
                currentEventImage: null,
                agentPhoto: null,
                agentLogo: null,
                brokerageLogo: null,
                customBanner: null
            },
            
            customPropertyTypes: [],
            customEvents: [],
            maintenanceTips: [...config.SEASONS.august.tips]
        };
    }

    /**
     * Get current newsletter data
     */
    getData() {
        return this.data;
    }

    /**
     * Update data at specified path
     * @param {string} path - Dot-notation path (e.g., 'agent.name', 'design.colors.accent')
     * @param {*} value - New value
     * @param {boolean} skipValidation - Skip validation (default: false)
     */
    updateData(path, value, skipValidation = false) {
        if (!skipValidation && !this.validateUpdate(path, value)) {
            return false;
        }

        const keys = path.split('.');
        let current = this.data;
        
        // Navigate to parent object
        for (let i = 0; i < keys.length - 1; i++) {
            if (!current[keys[i]]) {
                current[keys[i]] = {};
            }
            current = current[keys[i]];
        }
        
        const finalKey = keys[keys.length - 1];
        const oldValue = current[finalKey];
        current[finalKey] = value;
        
        // Trigger change events
        this.notifyListeners('dataChange', {
            path,
            value,
            oldValue,
            data: this.data
        });
        
        // Handle special cases
        this.handleSpecialUpdates(path, value, oldValue);
        
        return true;
    }

    /**
     * Handle special update logic
     */
    handleSpecialUpdates(path, value, oldValue) {
        // Update maintenance tips when season changes
        if (path === 'content.newsletterSeason') {
            this.updateMaintenanceTipsForSeason(value);
        }
        
        // Update corresponding hex field when color changes
        if (path.includes('Color') && !path.includes('Hex')) {
            const hexPath = path + 'Hex';
            this.updateData(hexPath, value, true); // Skip validation for hex update
        }
        
        // Auto-populate market button text when URL is added
        if (path === 'content.marketButtonUrl' && value && !this.data.content.marketButtonText) {
            this.updateData('content.marketButtonText', 'View Full Market Report', true);
        }
        
        // Update banner display logic
        if (path === 'design.bannerStyle') {
            if (value !== 'custom') {
                this.updateData('design.hideCustomBannerText', false, true);
            }
        }
    }

    /**
     * Validate data update
     */
    validateUpdate(path, value) {
        const validators = {
            'agent.email': (val) => !val || /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(val),
            'agent.website': (val) => !val || /^https?:\/\/.+/.test(val) || /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}/.test(val),
            'agent.phone': (val) => !val || /^[\d\s\-\(\)\+\.]+$/.test(val),
            'content.personalMessage': (val) => val && val.length >= 50 && val.length <= 1500,
            'content.marketButtonUrl': (val) => !val || /^https?:\/\/.+/.test(val)
        };
        
        const validator = validators[path];
        if (validator && !validator(value)) {
            this.notifyListeners('validationError', { path, value, message: 'Invalid value' });
            return false;
        }
        
        return true;
    }

    /**
     * Update maintenance tips for specific season
     */
    updateMaintenanceTipsForSeason(season) {
        const config = window.NewsletterConfig;
        const seasonConfig = config.SEASONS[season];
        
        if (seasonConfig && seasonConfig.tips) {
            const currentTips = this.data.maintenanceTips || [];
            const hasCustomTips = currentTips.length > 0 && !this.isDefaultTips(currentTips, season);
            
            if (!hasCustomTips) {
                this.data.maintenanceTips = [...seasonConfig.tips];
                this.notifyListeners('maintenanceTipsUpdated', { tips: this.data.maintenanceTips });
            }
        }
        
        // Update personal message and subtitle if they're still default
        if (seasonConfig.personalMessage && 
            this.data.content.personalMessage === config.SEASONS[this.data.content.newsletterSeason]?.personalMessage) {
            this.data.content.personalMessage = seasonConfig.personalMessage;
        }
        
        if (seasonConfig.subtitle && 
            this.data.content.customSubtitle === config.SEASONS[this.data.content.newsletterSeason]?.subtitle) {
            this.data.content.customSubtitle = seasonConfig.subtitle;
        }
    }

    /**
     * Check if current tips are default seasonal tips
     */
    isDefaultTips(currentTips, season) {
        const config = window.NewsletterConfig;
        const defaultTips = config.SEASONS[season]?.tips || [];
        
        if (currentTips.length !== defaultTips.length) return false;
        return currentTips.every((tip, index) => tip === defaultTips[index]);
    }

    /**
     * Add custom event
     */
    addEvent(eventData) {
        if (!this.data.customEvents) {
            this.data.customEvents = [];
        }
        
        const newEvent = {
            id: Date.now().toString(),
            ...eventData
        };
        
        this.data.customEvents.push(newEvent);
        this.notifyListeners('eventAdded', { event: newEvent });
        
        return newEvent;
    }

    /**
     * Remove custom event
     */
    removeEvent(eventId) {
        if (!this.data.customEvents) return false;
        
        const index = this.data.customEvents.findIndex(event => event.id === eventId);
        if (index === -1) return false;
        
        const removedEvent = this.data.customEvents.splice(index, 1)[0];
        this.notifyListeners('eventRemoved', { event: removedEvent });
        
        return true;
    }

    /**
     * Add maintenance tip
     */
    addMaintenanceTip(tip) {
        if (!tip || !tip.trim()) return false;
        
        const formattedTip = tip.match(/^[\u{1F300}-\u{1F9FF}]|^[\u{2600}-\u{27BF}]/u) ? tip : `üîß ${tip}`;
        
        if (!this.data.maintenanceTips) {
            this.data.maintenanceTips = [];
        }
        
        this.data.maintenanceTips.push(formattedTip);
        this.notifyListeners('maintenanceTipAdded', { tip: formattedTip });
        
        return true;
    }

    /**
     * Update maintenance tip
     */
    updateMaintenanceTip(index, newTip) {
        if (!this.data.maintenanceTips || !this.data.maintenanceTips[index]) {
            return false;
        }
        
        const oldTip = this.data.maintenanceTips[index];
        this.data.maintenanceTips[index] = newTip.trim();
        
        this.notifyListeners('maintenanceTipUpdated', { index, oldTip, newTip });
        return true;
    }

    /**
     * Remove maintenance tip
     */
    removeMaintenanceTip(index) {
        if (!this.data.maintenanceTips || !this.data.maintenanceTips[index]) {
            return false;
        }
        
        const removedTip = this.data.maintenanceTips.splice(index, 1)[0];
        this.notifyListeners('maintenanceTipRemoved', { index, tip: removedTip });
        
        return true;
    }

    /**
     * Reset maintenance tips to seasonal defaults
     */
    resetMaintenanceTips() {
        const config = window.NewsletterConfig;
        const season = this.data.content.newsletterSeason;
        const seasonConfig = config.SEASONS[season];
        
        if (seasonConfig && seasonConfig.tips) {
            this.data.maintenanceTips = [...seasonConfig.tips];
            this.notifyListeners('maintenanceTipsReset', { tips: this.data.maintenanceTips });
            return true;
        }
        
        return false;
    }

    /**
     * Add custom property type
     */
    addCustomPropertyType(name, icon = 'üèòÔ∏è') {
        const newPropertyType = {
            id: Date.now().toString(),
            name: name.trim(),
            icon: icon || 'üèòÔ∏è',
            stats: {
                price: '',
                priceChange: '',
                sales: '',
                salesChange: '',
                listings: '',
                listingsChange: '',
                supply: ''
            }
        };
        
        if (!this.data.customPropertyTypes) {
            this.data.customPropertyTypes = [];
        }
        
        this.data.customPropertyTypes.push(newPropertyType);
        this.notifyListeners('customPropertyTypeAdded', { propertyType: newPropertyType });
        
        return newPropertyType;
    }

    /**
     * Update custom property type stat
     */
    updateCustomPropertyTypeStat(propertyTypeId, statKey, value) {
        if (!this.data.customPropertyTypes) return false;
        
        const propertyType = this.data.customPropertyTypes.find(pt => pt.id === propertyTypeId);
        if (!propertyType) return false;
        
        propertyType.stats[statKey] = value;
        this.notifyListeners('customPropertyTypeStatUpdated', { propertyTypeId, statKey, value });
        
        return true;
    }

    /**
     * Remove custom property type
     */
    removeCustomPropertyType(propertyTypeId) {
        if (!this.data.customPropertyTypes) return false;
        
        const index = this.data.customPropertyTypes.findIndex(pt => pt.id === propertyTypeId);
        if (index === -1) return false;
        
        const removedPropertyType = this.data.customPropertyTypes.splice(index, 1)[0];
        this.notifyListeners('customPropertyTypeRemoved', { propertyType: removedPropertyType });
        
        return true;
    }

    /**
     * Apply color preset
     */
    applyColorPreset(presetName) {
        const config = window.NewsletterConfig;
        const preset = config.COLOR_PRESETS[presetName];
        
        if (!preset) return false;
        
        // Apply colors
        this.data.design.colors = { ...preset.colors };
        this.data.design.buttonColors = { ...this.data.design.buttonColors, ...preset.buttons };
        this.data.design.propertyTypeColors = { ...preset.propertyTypes };
        
        this.notifyListeners('colorPresetApplied', { presetName, preset });
        return true;
    }

    /**
     * Set image URL
     */
    setImage(imageKey, url) {
        this.data.images[imageKey] = url;
        this.notifyListeners('imageUpdated', { imageKey, url });
    }

    /**
     * Remove image
     */
    removeImage(imageKey) {
        this.data.images[imageKey] = null;
        this.notifyListeners('imageRemoved', { imageKey });
    }

    /**
     * Export data for sharing/saving
     */
    exportData() {
        return JSON.stringify(this.data, null, 2);
    }

    /**
     * Import data from JSON
     */
    importData(jsonData) {
        try {
            const importedData = JSON.parse(jsonData);
            this.data = { ...this.initializeData(), ...importedData };
            this.notifyListeners('dataImported', { data: this.data });
            return true;
        } catch (error) {
            console.error('Failed to import data:', error);
            return false;
        }
    }

    /**
     * Subscribe to data changes
     */
    subscribe(eventType, callback) {
        if (!this.listeners.has(eventType)) {
            this.listeners.set(eventType, new Set());
        }
        this.listeners.get(eventType).add(callback);
        
        // Return unsubscribe function
        return () => {
            const listeners = this.listeners.get(eventType);
            if (listeners) {
                listeners.delete(callback);
            }
        };
    }

    /**
     * Notify event listeners
     */
    notifyListeners(eventType, data) {
        const listeners = this.listeners.get(eventType);
        if (listeners) {
            listeners.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`Error in ${eventType} listener:`, error);
                }
            });
        }
    }

    /**
     * Bind global events
     */
    bindEvents() {
        // Auto-save to localStorage periodically
        setInterval(() => {
            try {
                localStorage.setItem('newsletter-builder-data', this.exportData());
            } catch (error) {
                console.warn('Failed to auto-save data:', error);
            }
        }, 30000); // Save every 30 seconds
    }

    /**
     * Load data from localStorage
     */
    loadFromStorage() {
        try {
            const savedData = localStorage.getItem('newsletter-builder-data');
            if (savedData) {
                return this.importData(savedData);
            }
        } catch (error) {
            console.warn('Failed to load data from storage:', error);
        }
        return false;
    }

    /**
     * Clear all data and reset to defaults
     */
    reset() {
        this.data = this.initializeData();
        this.notifyListeners('dataReset', { data: this.data });
        
        try {
            localStorage.removeItem('newsletter-builder-data');
        } catch (error) {
            console.warn('Failed to clear storage:', error);
        }
    }
}

// Create global instance
window.newsletterData = new NewsletterData();

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NewsletterData;
}
