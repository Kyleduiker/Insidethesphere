/**
 * Preview Generator Module
 * Handles the visual rendering of the newsletter preview
 */

class PreviewGenerator {
    constructor() {
        this.previewContainer = null;
        this.debounceTimer = null;
        this.init();
    }

    /**
     * Initialize preview generator
     */
    init() {
        this.previewContainer = DOMHelpers.findElement('#newsletterPreview');
        this.setupPreviewObserver();
        this.bindEvents();
    }

    /**
     * Setup intersection observer for preview animations
     */
    setupPreviewObserver() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animation = 'fadeInUp 0.8s ease forwards';
                }
            });
        }, observerOptions);

        // Observe elements as they're added
        this.observer = observer;
    }

    /**
     * Bind events for preview updates
     */
    bindEvents() {
        if (window.newsletterData) {
            window.newsletterData.subscribe('dataChange', () => {
                this.debounceGenerate();
            });

            window.newsletterData.subscribe('imageUpdated', () => {
                this.generate();
            });

            window.newsletterData.subscribe('eventAdded', () => {
                this.generate();
            });

            window.newsletterData.subscribe('maintenanceTipsUpdated', () => {
                this.generate();
            });
        }
    }

    /**
     * Debounce preview generation to improve performance
     */
    debounceGenerate() {
        clearTimeout(this.debounceTimer);
        this.debounceTimer = setTimeout(() => {
            this.generate();
        }, 300);
    }

    /**
     * Generate newsletter preview
     */
    generate() {
        if (!this.previewContainer) return;

        try {
            const data = window.newsletterData.getData();
            const config = window.NewsletterConfig;
            const seasonConfig = config.SEASONS[data.content.newsletterSeason];
            
            const previewHtml = this.generatePreviewHTML(data, seasonConfig);
            this.previewContainer.innerHTML = previewHtml;
            
            // Apply animations to new elements
            this.applyAnimations();
            
            // Update status
            this.updatePreviewStatus();
            
        } catch (error) {
            console.error('Preview generation failed:', error);
            this.showPreviewError();
        }
    }

    /**
     * Generate complete preview HTML
     */
    generatePreviewHTML(data, seasonConfig) {
        const colors = data.design.colors;
        
        return `
            <div style="max-width: 650px; margin: 0 auto; background: white; font-family: ${data.design.bodyFont}; color: ${colors.bodyText};">
                ${this.generateBanner(data, seasonConfig, colors)}
                ${this.generateSubtitle(data, seasonConfig, colors)}
                ${this.generatePersonalMessage(data, colors)}
                ${this.generateSmartButtons(data, colors)}
                ${this.generateDivider()}
                ${this.generateMarketStats(data, colors)}
                ${this.generateEvents(data, colors)}
                ${this.generateMaintenanceTips(data, seasonConfig, colors)}
                ${this.generateFooter(data, colors)}
            </div>
        `;
    }

    /**
     * Generate banner section
     */
    generateBanner(data, seasonConfig, colors) {
        const bannerStyle = data.design.bannerStyle;
        const headerFont = data.design.headerFont;
        
        switch (bannerStyle) {
            case 'mountains':
                return this.generateImageBanner(
                    'https://i.imgur.com/0dARtuj.png',
                    seasonConfig.title,
                    headerFont,
                    true
                );
                
            case 'cityscape':
                return this.generateImageBanner(
                    'https://i.imgur.com/qok5dLZ.jpg',
                    seasonConfig.title,
                    headerFont,
                    true
                );
                
            case 'blueprint':
                return this.generateImageBanner(
                    'https://i.imgur.com/W24OelN.jpg',
                    seasonConfig.title,
                    headerFont,
                    true
                );
                
            case 'custom':
                return this.generateImageBanner(
                    data.images.customBanner || this.getPlaceholderBanner(colors),
                    seasonConfig.title,
                    headerFont,
                    !data.design.hideCustomBannerText,
                    !data.images.customBanner
                );
                
            case 'minimal':
                return this.generateMinimalBanner(seasonConfig.title, headerFont, colors);
                
            case 'none':
                return this.generateTextOnlyBanner(seasonConfig.title, headerFont, colors);
                
            default:
                return this.generateTextOnlyBanner(seasonConfig.title, headerFont, colors);
        }
    }

    /**
     * Generate image banner
     */
    generateImageBanner(imageSrc, title, headerFont, showText = true, isPlaceholder = false) {
        return `
            <div style="position: relative; margin: 40px 0 60px 0; padding: 50px 20px;">
                <div style="position: relative; width: 600px; height: 300px; border-radius: 20px; overflow: hidden; background-image: url('${imageSrc}'); background-size: cover; background-position: center; margin: 0 auto;">
                    ${!isPlaceholder ? `<div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.3);"></div>` : ''}
                    ${showText ? `
                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; z-index: 3;">
                        <h1 style="font-family: ${headerFont}; font-size: 42px; font-weight: 400; letter-spacing: 4px; margin: 0; color: white; text-shadow: 0 4px 20px rgba(0,0,0,0.7);">${title}</h1>
                    </div>
                    ` : ''}
                    ${isPlaceholder ? `
                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; z-index: 3;">
                        <h1 style="font-family: ${headerFont}; font-size: 42px; font-weight: 400; letter-spacing: 4px; margin: 0; color: white; text-shadow: 0 4px 20px rgba(0,0,0,0.5);">${title}</h1>
                        <p style="color: white; font-size: 14px; margin-top: 10px; opacity: 0.9;">Upload custom banner image above</p>
                    </div>
                    ` : ''}
                </div>
            </div>
        `;
    }

    /**
     * Generate minimal banner
     */
    generateMinimalBanner(title, headerFont, colors) {
        return `
            <div style="text-align: center; margin: 40px 0; padding: 50px 20px;">
                <div style="border-bottom: 2px solid ${colors.accent}; display: inline-block; margin-bottom: 40px; padding-bottom: 10px;">
                    <h1 style="font-family: ${headerFont}; font-size: 36px; font-weight: 300; letter-spacing: 3px; margin: 0; color: ${colors.headerText};">${title}</h1>
                </div>
            </div>
        `;
    }

    /**
     * Generate text-only banner
     */
    generateTextOnlyBanner(title, headerFont, colors) {
        return `
            <div style="text-align: center; margin: 40px 0; padding: 20px;">
                <h1 style="font-family: ${headerFont}; font-size: 36px; font-weight: 400; letter-spacing: 3px; margin: 0; color: ${colors.headerText};">${title}</h1>
            </div>
        `;
    }

    /**
     * Generate placeholder banner
     */
    getPlaceholderBanner(colors) {
        return `data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 600 300' fill='none'%3e%3crect width='600' height='300' fill='url(%23grad)'/%3e%3cdefs%3e%3clinearGradient id='grad' x1='0%25' y1='0%25' x2='100%25' y2='100%25'%3e%3cstop offset='0%25' stop-color='${encodeURIComponent(colors.accent)}'/%3e%3cstop offset='100%25' stop-color='${encodeURIComponent(colors.headerText)}'/%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e`;
    }

    /**
     * Generate subtitle section
     */
    generateSubtitle(data, seasonConfig, colors) {
        return `
            <div style="text-align: center; margin: 30px 0;">
                <div style="font-family: ${data.design.headerFont}; font-size: 28px; font-weight: 300; color: ${colors.headerText};">
                    ${data.content.customSubtitle || seasonConfig.subtitle}
                </div>
            </div>
        `;
    }

    /**
     * Generate personal message section
     */
    generatePersonalMessage(data, colors) {
        return `
            <div style="max-width: 500px; margin: 40px auto 30px auto; text-align: center; padding: 25px; background: ${colors.background}; border-left: 4px solid ${colors.accent}; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.08);">
                <p style="font-size: 16px; line-height: 1.8; color: ${colors.bodyText}; margin: 0; font-weight: 400; font-style: italic;">${data.content.personalMessage}</p>
            </div>
        `;
    }

    /**
     * Generate smart buttons section
     */
    generateSmartButtons(data, colors) {
        const enabledButtons = this.getEnabledSmartButtons(data);
        
        if (enabledButtons.length === 0) return '';

        // Determine grid layout
        let gridCols = '1fr';
        if (enabledButtons.length === 2) {
            gridCols = '1fr 1fr';
        } else if (enabledButtons.length === 3) {
            gridCols = '1fr 1fr 1fr';
        } else if (enabledButtons.length >= 4) {
            gridCols = '1fr 1fr';
        }

        // Split into rows if more than 4 buttons
        const buttonRows = [];
        for (let i = 0; i < enabledButtons.length; i += (enabledButtons.length > 4 ? 2 : enabledButtons.length)) {
            buttonRows.push(enabledButtons.slice(i, i + (enabledButtons.length > 4 ? 2 : enabledButtons.length)));
        }

        return `
            <div style="max-width: 600px; margin: 40px auto 0; padding: 0 20px;">
                ${buttonRows.map(row => `
                    <div style="display: grid; grid-template-columns: ${row.length === 1 ? '1fr' : '1fr 1fr'}; gap: 15px; margin-bottom: 15px;">
                        ${row.map(button => `
                            <a href="${button.url}" style="display: block; background: ${button.color}; color: white; padding: 12px 16px; text-decoration: none; border-radius: 6px; font-weight: 600; font-size: 13px; text-align: center; text-transform: uppercase; letter-spacing: 0.5px; transition: transform 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'" target="_blank">
                                ${button.icon} ${button.name}
                            </a>
                        `).join('')}
                    </div>
                `).join('')}
            </div>
        `;
    }

    /**
     * Generate divider
     */
    generateDivider() {
        return `<div style="height: 1px; background: #e0e0e0; margin: 40px 40px 0;"></div>`;
    }

    /**
     * Generate market statistics section
     */
    generateMarketStats(data, colors) {
        const stats = data.stats;
        const propertyColors = data.design.propertyTypeColors;
        const activePropertyTypes = data.design.defaultPropertyTypes.filter(pt => !pt.deleted);
        
        // Get current month name for display
        const currentMonth = data.content.newsletterSeason || 'august';
        const monthNames = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
        const currentIndex = monthNames.indexOf(currentMonth);
        const previousIndex = currentIndex === 0 ? 11 : currentIndex - 1;
        const previousMonth = monthNames[previousIndex].charAt(0).toUpperCase() + monthNames[previousIndex].slice(1);

        return `
            <div style="padding: 40px;">
                <h2 style="font-family: ${data.design.headerFont}; font-size: 24px; font-weight: 400; text-align: center; margin-bottom: 30px; color: ${colors.headerText};">
                    Snapshot of ${previousMonth} Statistics
                </h2>
                
                <!-- Main Market Overview -->
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin-bottom: 30px;">
                    <div style="text-align: center; padding: 20px; background: ${colors.background}; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: 600; color: ${colors.accent}; margin-bottom: 5px;">${stats.avgPrice}</div>
                        <div style="font-size: 12px; color: ${colors.bodyText}; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 5px;">Total Residential Price</div>
                        <div style="font-size: 14px; font-weight: 500; color: ${this.getChangeColor(stats.priceChange)};">${stats.priceChange} Y/Y</div>
                    </div>
                    <div style="text-align: center; padding: 20px; background: ${colors.background}; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: 600; color: ${colors.headerText}; margin-bottom: 5px;">${stats.homesSold}</div>
                        <div style="font-size: 12px; color: ${colors.bodyText}; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 5px;">Sales</div>
                        <div style="font-size: 14px; font-weight: 500; color: ${this.getChangeColor(stats.salesChange)};">${stats.salesChange || 'N/A'} Y/Y</div>
                    </div>
                    <div style="text-align: center; padding: 20px; background: ${colors.background}; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: 600; color: ${propertyColors.row}; margin-bottom: 5px;">${stats.newListings}</div>
                        <div style="font-size: 12px; color: ${colors.bodyText}; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 5px;">New Listings</div>
                        <div style="font-size: 14px; font-weight: 500; color: ${this.getChangeColor(stats.listingsChange)};">${stats.listingsChange || 'N/A'} Y/Y</div>
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin-bottom: 40px;">
                    <div style="text-align: center; padding: 20px; background: ${colors.background}; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: 600; color: ${propertyColors.apartment}; margin-bottom: 5px;">${stats.inventory}</div>
                        <div style="font-size: 12px; color: ${colors.bodyText}; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 5px;">Total Inventory</div>
                        <div style="font-size: 14px; font-weight: 500; color: ${this.getChangeColor(stats.inventoryChange)};">${stats.inventoryChange || 'N/A'} Y/Y</div>
                    </div>
                    <div style="text-align: center; padding: 20px; background: ${colors.background}; border-radius: 8px;">
                        <div style="font-size: 24px; font-weight: 600; color: ${propertyColors.semi}; margin-bottom: 5px;">${stats.monthsOfSupply || 'N/A'}</div>
                        <div style="font-size: 12px; color: ${colors.bodyText}; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 5px;">Months of Supply</div>
                        <div style="font-size: 14px; font-weight: 500; color: ${this.getChangeColor(stats.supplyChange)};">${stats.supplyChange || 'Balanced'}</div>
                    </div>
                </div>

                ${activePropertyTypes.length > 0 ? `
                <h3 style="font-family: ${data.design.headerFont}; font-size: 20px; font-weight: 400; text-align: center; margin: 30px 0 25px 0; color: ${colors.headerText};">Property Type Breakdown</h3>
                
                ${activePropertyTypes.map(propertyType => this.generatePropertyTypeSection(propertyType, data, colors)).join('')}
                ` : ''}

                ${data.customPropertyTypes && data.customPropertyTypes.length > 0 ? 
                    data.customPropertyTypes.map(propertyType => this.generateCustomPropertyTypeSection(propertyType, data, colors)).join('') : ''
                }

                ${data.content.marketButtonText ? `
                <div style="text-align: center; margin-top: 30px;">
                    <a href="${data.content.marketButtonUrl || '#'}" style="display: inline-block; background: ${data.design.buttonColors.marketReport}; color: white; padding: 15px 30px; text-decoration: none; border-radius: 6px; font-weight: 600; font-size: 14px; text-transform: uppercase; letter-spacing: 0.5px; transition: transform 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'" target="_blank">${data.content.marketButtonText}</a>
                </div>
                ` : ''}
            </div>
        `;
    }

    /**
     * Generate property type section
     */
    generatePropertyTypeSection(propertyType, data, colors) {
        const ptStats = data.stats;
        const colorKey = propertyType.colorKey || propertyType.id;
        const color = data.design.propertyTypeColors[colorKey] || data.design.propertyTypeColors.detached;

        return `
            <div style="margin-bottom: 25px; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden;">
                <div style="background: ${color}; color: white; padding: 12px 20px; font-weight: 600; font-size: 14px; text-transform: uppercase; letter-spacing: 0.5px;">
                    ${propertyType.icon} ${propertyType.name}
                </div>
                <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 0;">
                    ${this.generatePropertyStatCell(ptStats[propertyType.id + 'Price'] || 'N/A', ptStats[propertyType.id + 'Change'] || 'N/A', 'Price', colors)}
                    ${this.generatePropertyStatCell(ptStats[propertyType.id + 'Sales'] || 'N/A', ptStats[propertyType.id + 'SalesChange'] || 'N/A', 'Sales', colors)}
                    ${this.generatePropertyStatCell(ptStats[propertyType.id + 'Listings'] || 'N/A', ptStats[propertyType.id + 'ListingsChange'] || 'N/A', 'Listings', colors)}
                    ${this.generatePropertyStatCell(ptStats[propertyType.id + 'Supply'] || 'N/A', '', 'Months Supply', colors, false)}
                </div>
            </div>
        `;
    }

    /**
     * Generate custom property type section
     */
    generateCustomPropertyTypeSection(propertyType, data, colors) {
        const color = data.design.propertyTypeColors.custom;

        return `
            <div style="margin-bottom: 25px; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden;">
                <div style="background: ${color}; color: white; padding: 12px 20px; font-weight: 600; font-size: 14px; text-transform: uppercase; letter-spacing: 0.5px;">
                    ${propertyType.icon} ${propertyType.name}
                </div>
                <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 0;">
                    ${this.generatePropertyStatCell(propertyType.stats.price || 'N/A', propertyType.stats.priceChange || 'N/A', 'Price', colors)}
                    ${this.generatePropertyStatCell(propertyType.stats.sales || 'N/A', propertyType.stats.salesChange || 'N/A', 'Sales', colors)}
                    ${this.generatePropertyStatCell(propertyType.stats.listings || 'N/A', propertyType.stats.listingsChange || 'N/A', 'Listings', colors)}
                    ${this.generatePropertyStatCell(propertyType.stats.supply || 'N/A', '', 'Months Supply', colors, false)}
                </div>
            </div>
        `;
    }

    /**
     * Generate property stat cell
     */
    generatePropertyStatCell(value, change, label, colors, hasBorder = true) {
        return `
            <div style="text-align: center; padding: 15px; ${hasBorder ? 'border-right: 1px solid #e0e0e0;' : ''} background: white;">
                <div style="font-size: 18px; font-weight: 600; color: ${colors.headerText}; margin-bottom: 3px;">${value}</div>
                <div style="font-size: 10px; color: ${colors.bodyText}; text-transform: uppercase; margin-bottom: 3px;">${label}</div>
                ${change ? `<div style="font-size: 12px; font-weight: 500; color: ${this.getChangeColor(change)};">${change} ${change !== 'N/A' && change !== '' ? 'Y/Y' : ''}</div>` : ''}
            </div>
        `;
    }

    /**
     * Generate events section
     */
    generateEvents(data, colors) {
        const events = data.customEvents || [];
        
        if (events.length === 0) return '';

        const sortedEvents = events.sort((a, b) => new Date(a.date) - new Date(b.date));

        return `
            ${this.generateDivider()}
            <div style="padding: 40px;">
                <h2 style="font-family: ${data.design.headerFont}; font-size: 24px; font-weight: 400; text-align: center; margin-bottom: 30px; color: ${colors.headerText};">Community Calendar</h2>
                <div style="display: grid; gap: 20px;">
                    ${sortedEvents.map(event => this.generateEventItem(event, colors)).join('')}
                </div>
            </div>
        `;
    }

    /**
     * Generate event item
     */
    generateEventItem(event, colors) {
        const eventDate = this.formatEventDate(event.date);
        const eventTime = this.formatEventTime(event.startTime, event.endTime);

        return `
            <div style="display: grid; grid-template-columns: 100px 1fr ${event.image ? '150px' : ''}; gap: 20px; align-items: center; padding: 20px; border: 1px solid #f0f0f0; border-radius: 8px; background: #fafafa;">
                <div style="text-align: center;">
                    <div style="background: ${colors.accent}; color: white; padding: 8px; font-size: 11px; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 5px; border-radius: 4px;">${eventDate.month}</div>
                    <div style="font-size: 24px; font-weight: 300; color: ${colors.headerText};">${eventDate.day}</div>
                    ${eventTime ? `<div style="font-size: 10px; color: ${colors.bodyText}; margin-top: 5px; line-height: 1.2;">${eventTime}</div>` : ''}
                </div>
                <div>
                    <h3 style="font-size: 16px; font-weight: 500; margin-bottom: 5px; color: ${colors.headerText};">${event.title}</h3>
                    ${eventTime ? `<p style="font-size: 13px; color: ${colors.bodyText}; margin: 0 0 5px 0;">🕐 ${eventTime}</p>` : ''}
                    ${event.location ? `<p style="font-size: 13px; color: ${colors.bodyText}; margin: 0 0 5px 0;">📍 ${event.location}</p>` : ''}
                    ${event.description ? `<p style="font-size: 12px; color: #999; margin: 5px 0 0 0; font-style: italic; line-height: 1.4;">${event.description}</p>` : ''}
                    ${event.detailsLink ? `
                    <div style="margin-top: 15px;">
                        <a href="${event.detailsLink}" style="display: inline-block; background: ${colors.accent}; color: white; padding: 8px 16px; text-decoration: none; border-radius: 5px; font-size: 12px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px; transition: transform 0.2s ease;" onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform='translateY(0)'" target="_blank">
                            📋 Event Details
                        </a>
                    </div>
                    ` : ''}
                </div>
                ${event.image ? `
                <div style="text-align: center;">
                    <img src="${event.image}" style="width: 140px; height: 100px; object-fit: cover; border-radius: 6px; border: 2px solid #e0e0e0;" alt="Event Image">
                </div>
                ` : ''}
            </div>
        `;
    }

    /**
     * Generate maintenance tips section
     */
    generateMaintenanceTips(data, seasonConfig, colors) {
        const tips = data.maintenanceTips || seasonConfig.tips || [];
        const month = data.content.newsletterSeason || 'august';

        return `
            ${this.generateDivider()}
            <div style="padding: 40px;">
                <h2 style="font-family: ${data.design.headerFont}; font-size: 24px; font-weight: 400; text-align: center; margin-bottom: 30px; color: ${colors.headerText};">${month.charAt(0).toUpperCase() + month.slice(1)} Maintenance Tips</h2>
                <div style="background: ${colors.background}; padding: 30px; border-radius: 8px;">
                    <ul style="list-style: none; padding: 0; margin: 0;">
                        ${tips.map(tip => `
                            <li style="padding: 10px 0; border-bottom: 1px solid #e0e0e0; font-size: 14px; color: ${colors.bodyText};">${tip}</li>
                        `).join('')}
                    </ul>
                </div>
            </div>
        `;
    }

    /**
     * Generate footer section
     */
    generateFooter(data, colors) {
        return `
            <div style="background: ${colors.background}; padding: 40px; text-align: center;">
                ${data.images.brokerageLogo ? `
                <div style="margin-bottom: 30px;">
                    <img src="${data.images.brokerageLogo}" style="max-width: 200px; max-height: 80px; object-fit: contain;" alt="Brokerage Logo">
                </div>
                ` : ''}
                
                <div style="display: inline-flex; align-items: center; gap: 30px;">
                    <div style="width: 100px; height: 100px; border-radius: 50%; overflow: hidden; background: #e0e0e0;">
                        ${data.images.agentPhoto ? 
                            `<img src="${data.images.agentPhoto}" style="width: 100%; height: 100%; object-fit: cover;" alt="Agent Photo">` :
                            `<div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; color: #999; font-size: 12px;">Agent Photo</div>`
                        }
                    </div>
                    <div style="text-align: left;">
                        <h3 style="font-family: ${data.design.headerFont}; font-size: 22px; font-weight: 400; margin-bottom: 5px; color: ${colors.headerText};">${data.agent.name || 'Your Name'}</h3>
                        <p style="font-size: 13px; color: ${colors.bodyText}; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 10px;">${data.agent.company || 'Your Company'}</p>
                        <p style="font-size: 14px; margin: 5px 0; color: ${colors.bodyText};">📱 ${data.agent.phone || '(000) 000-0000'}</p>
                        <p style="font-size: 14px; margin: 5px 0; color: ${colors.bodyText};">✉️ ${data.agent.email || 'your@email.com'}</p>
                    </div>
                    ${data.images.agentLogo ? `
                    <div style="margin-left: 20px;">
                        <img src="${data.images.agentLogo}" style="max-width: 120px; max-height: 80px; object-fit: contain;" alt="Agent Logo">
                    </div>
                    ` : ''}
                </div>
                
                <div style="margin-top: 20px;">
                    <a href="http://${data.agent.website || 'www.yourwebsite.com'}" style="color: ${colors.accent}; text-decoration: none; font-size: 14px;">${data.agent.website || 'www.yourwebsite.com'}</a>
                </div>
            </div>
        `;
    }

    /**
     * Helper functions
     */
    getEnabledSmartButtons(data) {
        const buttons = data.agent.smartButtons;
        const buttonColors = data.design.buttonColors;
        const enabled = [];

        if (buttons.buyersGuide.url) {
            enabled.push({
                name: buttons.buyersGuide.name || 'Button 1',
                url: buttons.buyersGuide.url,
                color: buttonColors.buyersGuide,
                icon: '🔘'
            });
        }

        if (buttons.sellersGuide.url) {
            enabled.push({
                name: buttons.sellersGuide.name || 'Button 2',
                url: buttons.sellersGuide.url,
                color: buttonColors.sellersGuide,
                icon: '🔘'
            });
        }

        if (buttons.website.url) {
            enabled.push({
                name: buttons.website.name || 'Button 3',
                url: buttons.website.url,
                color: buttonColors.website,
                icon: '🔘'
            });
        }

        if (buttons.blog.url) {
            enabled.push({
                name: buttons.blog.name || 'Button 4',
                url: buttons.blog.url,
                color: buttonColors.blog,
                icon: '🔘'
            });
        }

        return enabled;
    }

    getChangeColor(change) {
        if (!change || change === 'N/A') return '#666';
        return change.startsWith('-') ? '#dc3545' : '#27ae60';
    }

    formatEventDate(dateString) {
        const [year, month, day] = dateString.split('-');
        const monthNames = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 
                           'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        return {
            month: monthNames[parseInt(month) - 1],
            day: parseInt(day)
        };
    }

    formatEventTime(startTime, endTime) {
        if (!startTime) return '';
        
        const formatTime = (timeStr) => {
            const [hours, minutes] = timeStr.split(':');
            const hour12 = hours % 12 || 12;
            const ampm = hours >= 12 ? 'PM' : 'AM';
            return `${hour12}:${minutes} ${ampm}`;
        };
        
        const formattedStart = formatTime(startTime);
        
        if (endTime) {
            const formattedEnd = formatTime(endTime);
            return `${formattedStart} - ${formattedEnd}`;
        }
        
        return formattedStart;
    }

    /**
     * Apply animations to preview elements
     */
    applyAnimations() {
        if (this.observer) {
            const animatableElements = this.previewContainer.querySelectorAll('h2, h3, .stat-grid, .event-item');
            animatableElements.forEach(el => {
                this.observer.observe(el);
            });
        }
    }

    /**
     * Update preview status
     */
    updatePreviewStatus() {
        const statusEl = DOMHelpers.findElement('#previewStatus');
        if (!statusEl) return;
        
        const data = window.newsletterData.getData();
        const hasName = data.agent.name && data.agent.name.trim();
        const hasMessage = data.content.personalMessage && data.content.personalMessage.trim();
        const hasStats = data.stats.avgPrice || data.stats.homesSold;
        
        if (hasName && hasMessage && hasStats) {
            statusEl.textContent = '✅ Your newsletter is ready! Use Export Options below to share it.';
            statusEl.style.color = 'var(--success-color)';
        } else if (hasMessage || hasName) {
            statusEl.textContent = 'Keep adding content to complete your newsletter';
            statusEl.style.color = 'var(--primary-color)';
        } else {
            statusEl.textContent = '📝 Start filling out the form to see your newsletter preview';
            statusEl.style.color = 'var(--text-muted)';
        }
    }

    /**
     * Show preview error
     */
    showPreviewError() {
        if (this.previewContainer) {
            this.previewContainer.innerHTML = `
                <div style="padding: 40px; text-align: center; color: #dc3545;">
                    <h3>Preview Error</h3>
                    <p>There was an error generating the newsletter preview.</p>
                    <button onclick="window.previewGenerator.generate()" class="btn btn--primary">Try Again</button>
                </div>
            `;
        }
    }

    /**
     * Regenerate preview (public method)
     */
    refresh() {
        this.generate();
    }

    /**
     * Get preview HTML for export
     */
    getPreviewHTML() {
        return this.previewContainer ? this.previewContainer.innerHTML : '';
    }

    /**
     * Destroy preview generator
     */
    destroy() {
        if (this.observer) {
            this.observer.disconnect();
        }
        clearTimeout(this.debounceTimer);
    }
}

// Create global instance
window.previewGenerator = new PreviewGenerator();

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PreviewGenerator;
}
