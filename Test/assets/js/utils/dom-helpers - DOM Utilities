/**
 * DOM Helper Utilities
 * Common DOM manipulation functions used throughout the application
 */

class DOMHelpers {
    /**
     * Create element with attributes and content
     */
    static createElement(tag, attributes = {}, content = '') {
        const element = document.createElement(tag);
        
        Object.entries(attributes).forEach(([key, value]) => {
            if (key === 'className') {
                element.className = value;
            } else if (key === 'dataset') {
                Object.entries(value).forEach(([dataKey, dataValue]) => {
                    element.dataset[dataKey] = dataValue;
                });
            } else if (key === 'style' && typeof value === 'object') {
                Object.entries(value).forEach(([styleKey, styleValue]) => {
                    element.style[styleKey] = styleValue;
                });
            } else if (key.startsWith('on') && typeof value === 'function') {
                element.addEventListener(key.slice(2).toLowerCase(), value);
            } else {
                element.setAttribute(key, value);
            }
        });
        
        if (typeof content === 'string') {
            element.innerHTML = content;
        } else if (content instanceof Node) {
            element.appendChild(content);
        } else if (Array.isArray(content)) {
            content.forEach(child => {
                if (typeof child === 'string') {
                    element.insertAdjacentHTML('beforeend', child);
                } else if (child instanceof Node) {
                    element.appendChild(child);
                }
            });
        }
        
        return element;
    }

    /**
     * Find element with error handling
     */
    static findElement(selector, context = document) {
        try {
            const element = context.querySelector(selector);
            if (!element) {
                console.warn(`Element not found: ${selector}`);
            }
            return element;
        } catch (error) {
            console.error(`Invalid selector: ${selector}`, error);
            return null;
        }
    }

    /**
     * Find all elements with error handling
     */
    static findElements(selector, context = document) {
        try {
            return Array.from(context.querySelectorAll(selector));
        } catch (error) {
            console.error(`Invalid selector: ${selector}`, error);
            return [];
        }
    }

    /**
     * Add event listener with automatic cleanup
     */
    static addEventListenerWithCleanup(element, event, handler, options = {}) {
        if (!element || typeof handler !== 'function') {
            console.warn('Invalid element or handler for event listener');
            return () => {};
        }
        
        element.addEventListener(event, handler, options);
        
        // Return cleanup function
        return () => {
            element.removeEventListener(event, handler, options);
        };
    }

    /**
     * Toggle class with optional force parameter
     */
    static toggleClass(element, className, force = null) {
        if (!element || !className) return false;
        
        if (force !== null) {
            return force ? element.classList.add(className) : element.classList.remove(className);
        }
        
        return element.classList.toggle(className);
    }

    /**
     * Show element with animation
     */
    static show(element, animation = 'fadeIn') {
        if (!element) return;
        
        element.style.display = 'block';
        element.classList.remove('hidden');
        
        if (animation) {
            element.style.animation = `${animation} 0.3s ease-out`;
        }
    }

    /**
     * Hide element with animation
     */
    static hide(element, animation = 'fadeOut') {
        if (!element) return;
        
        return new Promise((resolve) => {
            if (animation) {
                element.style.animation = `${animation} 0.3s ease-out`;
                element.addEventListener('animationend', () => {
                    element.style.display = 'none';
                    element.classList.add('hidden');
                    resolve();
                }, { once: true });
            } else {
                element.style.display = 'none';
                element.classList.add('hidden');
                resolve();
            }
        });
    }

    /**
     * Clear all children from element
     */
    static clearChildren(element) {
        if (!element) return;
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }

    /**
     * Insert HTML safely
     */
    static insertHTML(element, html, position = 'innerHTML') {
        if (!element) return;
        
        const sanitizedHTML = this.sanitizeHTML(html);
        
        switch (position) {
            case 'innerHTML':
                element.innerHTML = sanitizedHTML;
                break;
            case 'beforebegin':
            case 'afterbegin':
            case 'beforeend':
            case 'afterend':
                element.insertAdjacentHTML(position, sanitizedHTML);
                break;
            default:
                console.warn(`Invalid position: ${position}`);
        }
    }

    /**
     * Basic HTML sanitization (for user content)
     */
    static sanitizeHTML(html) {
        const div = document.createElement('div');
        div.textContent = html;
        return div.innerHTML;
    }

    /**
     * Get form data as object
     */
    static getFormData(form) {
        if (!form) return {};
        
        const formData = new FormData(form);
        const data = {};
        
        for (let [key, value] of formData.entries()) {
            // Handle multiple values (checkboxes, multiple selects)
            if (data[key]) {
                if (Array.isArray(data[key])) {
                    data[key].push(value);
                } else {
                    data[key] = [data[key], value];
                }
            } else {
                data[key] = value;
            }
        }
        
        return data;
    }

    /**
     * Set form values from object
     */
    static setFormData(form, data) {
        if (!form || !data) return;
        
        Object.entries(data).forEach(([name, value]) => {
            const field = form.querySelector(`[name="${name}"]`);
            if (field) {
                if (field.type === 'checkbox' || field.type === 'radio') {
                    field.checked = !!value;
                } else {
                    field.value = value || '';
                }
            }
        });
    }

    /**
     * Debounce function calls
     */
    static debounce(func, wait, immediate = false) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                timeout = null;
                if (!immediate) func.apply(this, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(this, args);
        };
    }

    /**
     * Throttle function calls
     */
    static throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }

    /**
     * Check if element is in viewport
     */
    static isInViewport(element, offset = 0) {
        if (!element) return false;
        
        const rect = element.getBoundingClientRect();
        return (
            rect.top >= -offset &&
            rect.left >= -offset &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) + offset &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth) + offset
        );
    }

    /**
     * Scroll to element smoothly
     */
    static scrollToElement(element, options = {}) {
        if (!element) return;
        
        const defaultOptions = {
            behavior: 'smooth',
            block: 'center',
            inline: 'nearest'
        };
        
        element.scrollIntoView({ ...defaultOptions, ...options });
    }

    /**
     * Copy text to clipboard
     */
    static async copyToClipboard(text) {
        try {
            if (navigator.clipboard && window.isSecureContext) {
                await navigator.clipboard.writeText(text);
                return true;
            } else {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                textArea.style.position = 'fixed';
                textArea.style.left = '-999999px';
                textArea.style.top = '-999999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                
                const result = document.execCommand('copy');
                document.body.removeChild(textArea);
                return result;
            }
        } catch (error) {
            console.error('Failed to copy text:', error);
            return false;
        }
    }

    /**
     * Create toast notification
     */
    static showToast(message, type = 'info', duration = 3000) {
        const container = this.findElement('#toastContainer') || this.createToastContainer();
        
        const toast = this.createElement('div', {
            className: `toast toast--${type}`,
            style: {
                animation: 'slideIn 0.3s ease-out'
            }
        }, message);
        
        container.appendChild(toast);
        
        // Auto remove
        setTimeout(() => {
            toast.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, duration);
        
        return toast;
    }

    /**
     * Create toast container if it doesn't exist
     */
    static createToastContainer() {
        let container = this.findElement('#toastContainer');
        if (!container) {
            container = this.createElement('div', {
                id: 'toastContainer',
                className: 'toast-container'
            });
            document.body.appendChild(container);
        }
        return container;
    }

    /**
     * Wait for DOM to be ready
     */
    static ready(callback) {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', callback);
        } else {
            callback();
        }
    }

    /**
     * Create loading spinner
     */
    static createLoadingSpinner(size = 'medium') {
        return this.createElement('div', {
            className: `loading-spinner loading-spinner--${size}`,
            'aria-label': 'Loading'
        }, `
            <div class="spinner-circle"></div>
            <div class="spinner-circle"></div>
            <div class="spinner-circle"></div>
        `);
    }

    /**
     * Show loading state on element
     */
    static showLoading(element, message = 'Loading...') {
        if (!element) return;
        
        element.classList.add('loading');
        element.setAttribute('aria-busy', 'true');
        
        const spinner = this.createLoadingSpinner();
        const text = this.createElement('span', { className: 'loading-text' }, message);
        const loadingContainer = this.createElement('div', { className: 'loading-overlay' }, [spinner, text]);
        
        element.appendChild(loadingContainer);
        
        return () => this.hideLoading(element);
    }

    /**
     * Hide loading state
     */
    static hideLoading(element) {
        if (!element) return;
        
        element.classList.remove('loading');
        element.removeAttribute('aria-busy');
        
        const loadingOverlay = element.querySelector('.loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.remove();
        }
    }

    /**
     * Format file size for display
     */
    static formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * Validate file type and size
     */
    static validateFile(file, options = {}) {
        const {
            maxSize = 5 * 1024 * 1024, // 5MB default
            allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp']
        } = options;
        
        const errors = [];
        
        if (file.size > maxSize) {
            errors.push(`File size (${this.formatFileSize(file.size)}) exceeds maximum allowed size (${this.formatFileSize(maxSize)})`);
        }
        
        if (!allowedTypes.includes(file.type)) {
            errors.push(`File type (${file.type}) is not allowed. Allowed types: ${allowedTypes.join(', ')}`);
        }
        
        return {
            valid: errors.length === 0,
            errors
        };
    }

    /**
     * Create file input with validation
     */
    static createFileInput(options = {}) {
        const {
            accept = 'image/*',
            multiple = false,
            onFileSelect,
            maxSize = 5 * 1024 * 1024,
            allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp']
        } = options;
        
        const input = this.createElement('input', {
            type: 'file',
            accept,
            multiple: multiple ? 'multiple' : false
        });
        
        input.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            const validatedFiles = [];
            const errors = [];
            
            files.forEach(file => {
                const validation = this.validateFile(file, { maxSize, allowedTypes });
                if (validation.valid) {
                    validatedFiles.push(file);
                } else {
                    errors.push(...validation.errors);
                }
            });
            
            if (errors.length > 0) {
                errors.forEach(error => this.showToast(error, 'error'));
            }
            
            if (validatedFiles.length > 0 && onFileSelect) {
                onFileSelect(multiple ? validatedFiles : validatedFiles[0]);
            }
        });
        
        return input;
    }
}

// Export for global use
window.DOMHelpers = DOMHelpers;

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DOMHelpers;
}
