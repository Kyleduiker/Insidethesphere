/**
 * Newsletter Builder Pro - Main Application
 * Initializes all modules and manages the overall application flow
 */

class NewsletterApp {
    constructor() {
        this.initialized = false;
        this.modules = {};
        this.eventListeners = [];
    }

    /**
     * Initialize the application
     */
    async init() {
        if (this.initialized) return;

        try {
            // Wait for DOM to be ready
            await this.waitForDOM();
            
            // Initialize core modules
            await this.initializeModules();
            
            // Setup application event listeners
            this.setupEventListeners();
            
            // Render initial UI
            this.renderInitialUI();
            
            // Load saved data
            this.loadSavedData();
            
            // Setup form handlers
            this.setupFormHandlers();
            
            // Setup keyboard shortcuts
            this.setupKeyboardShortcuts();
            
            this.initialized = true;
            
            this.showWelcomeMessage();
            
        } catch (error) {
            console.error('Failed to initialize Newsletter Builder:', error);
            DOMHelpers.showToast('Application started with some limitations. Please refresh if you encounter issues.', 'warning', 6000);
        }
    }

    /**
     * Wait for DOM to be ready
     */
    waitForDOM() {
        return new Promise((resolve) => {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', resolve);
            } else {
                resolve();
            }
        });
    }

    /**
     * Initialize all modules
     */
    async initializeModules() {
        // Modules are already initialized globally, just store references
        this.modules = {
            data: window.newsletterData,
            modals: window.modalManager,
            dom: window.DOMHelpers,
            config: window.NewsletterConfig
        };

        // Initialize additional modules if they exist
        if (window.imageHandler) this.modules.imageHandler = window.imageHandler;
        if (window.exportManager) this.modules.exportManager = window.exportManager;
        if (window.previewGenerator) this.modules.previewGenerator = window.previewGenerator;
    }

    /**
     * Setup application event listeners
     */
    setupEventListeners() {
        // Listen to data changes
        this.modules.data.subscribe('dataChange', (data) => {
            this.handleDataChange(data);
        });

        this.modules.data.subscribe('validationError', (data) => {
            this.handleValidationError(data);
        });

        // Listen to modal events
        this.modules.modals.on('eventAdded', () => {
            this.updateEventsList();
            this.updatePreview();
        });

        this.modules.modals.on('customPropertyTypeAdded', () => {
            this.renderStats();
            this.updatePreview();
        });

        this.modules.modals.on('maintenanceTipAdded', () => {
            this.renderMaintenanceTipsSummary();
            this.updatePreview();
        });

        // Window events
        window.addEventListener('beforeunload', (e) => {
            this.handleBeforeUnload(e);
        });

        window.addEventListener('resize', 
            this.modules.dom.debounce(() => this.handleResize(), 250)
        );
    }

    /**
     * Render initial UI components
     */
    renderInitialUI() {
        this.renderFormSections();
        this.renderStats();
        this.renderInstructions();
        this.updateMonthDisplay();
        this.updateEventsList();
        this.renderMaintenanceTipsSummary();
        this.updatePreview();
    }

    /**
     * Render form sections
     */
    renderFormSections() {
        const container = DOMHelpers.findElement('#newsletter-form');
        if (!container) return;

        const sections = [
            this.createDesignSection(),
            this.createPersonalMessageSection(),
            this.createSmartButtonsSection(),
            this.createMarketStatsSection(),
            this.createMaintenanceTipsSection(),
            this.createEventsSection(),
            this.createAgentInfoSection(),
            this.createGenerateButton()
        ];

        container.innerHTML = '';
        sections.forEach(section => {
            if (section) container.appendChild(section);
        });
    }

    /**
     * Create design section
     */
    createDesignSection() {
        const data = this.modules.data.getData();
        
        return DOMHelpers.createElement('div', { className: 'form-section fade-in' }, `
            <h3 class="form-section__header">🎨 Month & Banner Design</h3>
            
            <div class="form-group">
                <label class="form-label">Newsletter Month</label>
                <select name="newsletterSeason" class="form-input">
                    ${Object.entries(this.modules.config.SEASONS).map(([key, season]) => 
                        `<option value="${key}" ${key === data.content.newsletterSeason ? 'selected' : ''}>${season.title}</option>`
                    ).join('')}
                </select>
            </div>
            
            <div class="form-group">
                <label class="form-label">Banner Style</label>
                <select name="bannerStyle" class="form-input">
                    <option value="mountains" ${data.design.bannerStyle === 'mountains' ? 'selected' : ''}>Mountains</option>
                    <option value="cityscape" ${data.design.bannerStyle === 'cityscape' ? 'selected' : ''}>City Skyline</option>
                    <option value="blueprint" ${data.design.bannerStyle === 'blueprint' ? 'selected' : ''}>Blueprint</option>
                    <option value="minimal" ${data.design.bannerStyle === 'minimal' ? 'selected' : ''}>Clean Minimal</option>
                    <option value="custom" ${data.design.bannerStyle === 'custom' ? 'selected' : ''}>Custom Banner Image</option>
                    <option value="none" ${data.design.bannerStyle === 'none' ? 'selected' : ''}>No Banner</option>
                </select>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Header Font</label>
                    <select name="headerFont" class="form-input">
                        <option value="'Playfair Display', serif" ${data.design.headerFont.includes('Playfair') ? 'selected' : ''}>Playfair Display</option>
                        <option value="'Cormorant Garamond', serif" ${data.design.headerFont.includes('Cormorant') ? 'selected' : ''}>Cormorant Garamond</option>
                        <option value="'Lora', serif" ${data.design.headerFont.includes('Lora') ? 'selected' : ''}>Lora</option>
                        <option value="'Crimson Text', serif" ${data.design.headerFont.includes('Crimson') ? 'selected' : ''}>Crimson Text</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Body Font</label>
                    <select name="bodyFont" class="form-input">
                        <option value="'Montserrat', sans-serif" ${data.design.bodyFont.includes('Montserrat') ? 'selected' : ''}>Montserrat</option>
                        <option value="'Raleway', sans-serif" ${data.design.bodyFont.includes('Raleway') ? 'selected' : ''}>Raleway</option>
                        <option value="'Helvetica Neue', sans-serif" ${data.design.bodyFont.includes('Helvetica') ? 'selected' : ''}>Helvetica Neue</option>
                        <option value="Arial, sans-serif" ${data.design.bodyFont.includes('Arial') ? 'selected' : ''}>Arial</option>
                    </select>
                </div>
            </div>
            
            <div class="color-presets">
                <h4>Quick Color Presets</h4>
                <div class="color-preset-grid">
                    ${Object.keys(this.modules.config.COLOR_PRESETS).map(presetName => 
                        `<button type="button" class="quick-color-btn" onclick="app.applyColorPreset('${presetName}')" title="${presetName}"></button>`
                    ).join('')}
                </div>
            </div>
        `);
    }

    /**
     * Create personal message section
     */
    createPersonalMessageSection() {
        const data = this.modules.data.getData();
        
        return DOMHelpers.createElement('div', { className: 'form-section fade-in' }, `
            <h3 class="form-section__header">💬 Personal Message</h3>
            
            <div class="form-group">
                <label class="form-label">Custom Subtitle</label>
                <input type="text" name="customSubtitle" class="form-input" value="${data.content.customSubtitle}" placeholder="Enter custom subtitle...">
                <small>Leave blank to use default seasonal subtitle</small>
            </div>
            
            <div class="form-group">
                <label class="form-label required">Opening Message</label>
                <textarea name="personalMessage" rows="4" class="form-input" required>${data.content.personalMessage}</textarea>
                <small>Minimum 50 characters, maximum 1500 characters</small>
            </div>
        `);
    }

    /**
     * Create smart buttons section
     */
    createSmartButtonsSection() {
        const data = this.modules.data.getData();
        
        return DOMHelpers.createElement('div', { className: 'form-section fade-in' }, `
            <h3 class="form-section__header">🔗 Smart Buttons</h3>
            <p style="font-size: 12px; color: var(--text-muted); margin-bottom: 20px;">
                Use Smart Buttons to quickly add clickable links to your newsletter. Just copy and paste any website URL to instantly direct readers to your website, buyer or seller guides, blogs, or any resource you choose.
            </p>
            
            ${[1, 2, 3, 4].map(num => {
                const buttonKeys = ['buyersGuide', 'sellersGuide', 'website', 'blog'];
                const key = buttonKeys[num - 1];
                const button = data.agent.smartButtons[key];
                
                return `
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">🔘 Smart Button ${num} Name</label>
                            <input type="text" name="${key}Name" class="form-input" value="${button.name}" placeholder="Button ${num}">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Smart Button ${num} URL</label>
                            <input type="url" name="${key}Url" class="form-input" value="${button.url}" placeholder="https://example.com/button${num}">
                        </div>
                    </div>
                `;
            }).join('')}
        `);
    }

    /**
     * Create market stats section
     */
    createMarketStatsSection() {
        return DOMHelpers.createElement('div', { className: 'form-section fade-in' }, `
            <h3 class="form-section__header">📊 Market Statistics</h3>
            <p style="font-size: 12px; color: var(--text-muted); margin-bottom: 20px;">
                Enter your market statistics manually. The system will organize them into a professional layout.
            </p>
            
            <div id="statsGrid">
                <!-- Stats will be rendered here -->
            </div>
            
            <div id="customPropertyTypesContainer">
                <!-- Custom property types will be rendered here -->
            </div>
            
            <button type="button" class="btn btn--primary btn--full" data-action="show-modal" data-modal="addCustomPropertyTypeModal">
                + Add Custom Property Type
            </button>
        `);
    }

    /**
     * Create maintenance tips section
     */
    createMaintenanceTipsSection() {
        return DOMHelpers.createElement('div', { className: 'form-section fade-in' }, `
            <h3 class="form-section__header">🔧 Monthly Maintenance Tips</h3>
            <p style="font-size: 12px; color: var(--text-muted); margin-bottom: 15px;">
                Manage maintenance tips for the selected month. Tips automatically update when you change months.
            </p>
            
            <div id="maintenanceTipsSummary">
                <!-- Summary will be rendered here -->
            </div>
            
            <button type="button" class="btn btn--primary btn--full" data-action="show-modal" data-modal="maintenanceTipsModal">
                🔧 Manage Maintenance Tips
            </button>
        `);
    }

    /**
     * Create events section
     */
    createEventsSection() {
        return DOMHelpers.createElement('div', { className: 'form-section fade-in' }, `
            <h3 class="form-section__header">📅 Community Calendar & Events</h3>
            <p style="font-size: 12px; color: var(--text-muted); margin-bottom: 15px;">
                Add your community events with optional images automatically hosted on Imgur for email compatibility.
            </p>
            
            <button type="button" class="btn btn--primary btn--full" data-action="show-modal" data-modal="addEventModal">
                + Add Event
            </button>
            
            <div id="customEventsList">
                <!-- Custom events will appear here -->
            </div>
        `);
    }

    /**
     * Create agent info section
     */
    createAgentInfoSection() {
        const data = this.modules.data.getData();
        
        return DOMHelpers.createElement('div', { className: 'form-section fade-in' }, `
            <h3 class="form-section__header">👤 Your Information</h3>
            
            <div class="form-group">
                <label class="form-label required">Full Name</label>
                <input type="text" name="agentName" class="form-input" value="${data.agent.name}" required>
            </div>
            
            <div class="form-group">
                <label class="form-label required">Company Name</label>
                <input type="text" name="companyName" class="form-input" value="${data.agent.company}" required>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label required">Phone</label>
                    <input type="tel" name="agentPhone" class="form-input" value="${data.agent.phone}" required>
                </div>
                <div class="form-group">
                    <label class="form-label required">Email</label>
                    <input type="email" name="agentEmail" class="form-input" value="${data.agent.email}" required>
                </div>
            </div>
            
            <div class="form-group">
                <label class="form-label required">Website</label>
                <input type="url" name="agentWebsite" class="form-input" value="${data.agent.website}" required>
            </div>
        `);
    }

    /**
     * Create generate button
     */
    createGenerateButton() {
        return DOMHelpers.createElement('div', { className: 'form-actions' }, `
            <button type="button" class="btn btn--primary btn--full" onclick="app.generateNewsletter()" style="font-size: 16px; padding: 16px 24px;">
                ✨ Generate Newsletter
            </button>
        `);
    }

    /**
     * Render instructions
     */
    renderInstructions() {
        const container = DOMHelpers.findElement('.instruction-steps');
        if (!container) return;

        const steps = [
            {
                title: 'Choose Your Month & Style',
                description: 'Select your newsletter month and banner style. Try the Royal LePage branding button for instant professional colors!'
            },
            {
                title: 'Add Your Personal Message',
                description: 'Write your opening message and customize Smart Buttons by adding URLs to your website, guides, or resources.'
            },
            {
                title: 'Enter Market Statistics',
                description: 'Fill in your local market data. You can edit property type names, add custom types, and customize colors.'
            },
            {
                title: 'Add Events & Your Information',
                description: 'Include community events with images, update maintenance tips, and fill in your contact information and photos.'
            },
            {
                title: 'Generate & Export',
                description: 'Click "Generate Newsletter" to see your preview, then use "Export Options" to copy for email, download HTML, or print.'
            }
        ];

        container.innerHTML = steps.map((step, index) => `
            <div class="instruction-step">
                <h4>
                    <span class="step-number">${index + 1}</span>
                    ${step.title}
                </h4>
                <p>${step.description}</p>
            </div>
        `).join('');
    }

    /**
     * Setup form handlers
     */
    setupFormHandlers() {
        const form = DOMHelpers.findElement('#newsletter-form');
        if (!form) return;

        // Handle input changes with debouncing
        const handleInput = this.modules.dom.debounce((e) => {
            const { name, value, type, checked } = e.target;
            if (!name) return;

            const finalValue = type === 'checkbox' ? checked : value;
            
            // Map form field names to data paths
            const fieldPath = this.getFieldPath(name);
            if (fieldPath) {
                this.modules.data.updateData(fieldPath, finalValue);
            }
        }, 300);

        form.addEventListener('input', handleInput);
        form.addEventListener('change', handleInput);

        // Handle show modal buttons
        form.addEventListener('click', (e) => {
            if (e.target.dataset.action === 'show-modal') {
                const modalId = e.target.dataset.modal;
                if (modalId) {
                    this.modules.modals.show(modalId);
                }
            }
        });
    }

    /**
     * Get field path for data updates
     */
    getFieldPath(fieldName) {
        const fieldPaths = {
            // Design
            'bannerStyle': 'design.bannerStyle',
            'headerFont': 'design.headerFont',
            'bodyFont': 'design.bodyFont',
            
            // Content
            'newsletterSeason': 'content.newsletterSeason',
            'customSubtitle': 'content.customSubtitle',
            'personalMessage': 'content.personalMessage',
            
            // Agent
            'agentName': 'agent.name',
            'companyName': 'agent.company',
            'agentPhone': 'agent.phone',
            'agentEmail': 'agent.email',
            'agentWebsite': 'agent.website',
            
            // Smart buttons
            'buyersGuideName': 'agent.smartButtons.buyersGuide.name',
            'buyersGuideUrl': 'agent.smartButtons.buyersGuide.url',
            'sellersGuideName': 'agent.smartButtons.sellersGuide.name',
            'sellersGuideUrl': 'agent.smartButtons.sellersGuide.url',
            'websiteName': 'agent.smartButtons.website.name',
            'websiteUrl': 'agent.smartButtons.website.url',
            'blogName': 'agent.smartButtons.blog.name',
            'blogUrl': 'agent.smartButtons.blog.url'
        };

        return fieldPaths[fieldName];
    }

    /**
     * Setup keyboard shortcuts
     */
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + Enter to generate newsletter
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                e.preventDefault();
                this.generateNewsletter();
            }
        });
    }

    /**
     * Handle data changes
     */
    handleDataChange(changeData) {
        const { path, value } = changeData;
        
        // Update preview when relevant data changes
        if (this.shouldUpdatePreview(path)) {
            this.updatePreview();
        }
        
        // Update month display
        if (path === 'content.newsletterSeason') {
            this.updateMonthDisplay();
        }
        
        // Update status
        this.updatePreviewStatus();
    }

    /**
     * Check if preview should update for this data path
     */
    shouldUpdatePreview(path) {
        const previewPaths = [
            'content.personalMessage',
            'content.customSubtitle',
            'agent.name',
            'agent.company',
            'agent.phone',
            'agent.email',
            'agent.website',
            'design.',
            'stats.'
        ];
        
        return previewPaths.some(p => path.startsWith(p));
    }

    /**
     * Handle validation errors
     */
    handleValidationError(errorData) {
        const { path, message } = errorData;
        DOMHelpers.showToast(`Validation Error: ${message}`, 'error');
    }

    /**
     * Handle before unload
     */
    handleBeforeUnload(e) {
        // Auto-save data before leaving
        try {
            localStorage.setItem('newsletter-builder-data', this.modules.data.exportData());
        } catch (error) {
            console.warn('Failed to save data before unload:', error);
        }
    }

    /**
     * Handle window resize
     */
    handleResize() {
        // Handle responsive behavior if needed
        console.log('Window resized');
    }

    /**
     * Load saved data
     */
    loadSavedData() {
        if (this.modules.data.loadFromStorage()) {
            DOMHelpers.showToast('Restored previous session data', 'success', 2000);
        }
    }

    /**
     * Generate newsletter
     */
    generateNewsletter() {
        this.updatePreview();
        DOMHelpers.showToast('✨ Newsletter generated successfully!', 'success');
    }

    /**
     * Update preview (placeholder - will be implemented by preview module)
     */
    updatePreview() {
        if (this.modules.previewGenerator) {
            this.modules.previewGenerator.generate();
        } else {
            // Basic preview update
            const preview = DOMHelpers.findElement('#newsletterPreview');
            if (preview) {
                const data = this.modules.data.getData();
                preview.innerHTML = `
                    <div style="padding: 40px; text-align: center; font-family: 'Montserrat', sans-serif;">
                        <h1 style="color: #f39c12; margin-bottom: 20px;">NEWSLETTER PREVIEW</h1>
                        <div style="background: #f8f9fa; padding: 25px; margin: 30px 0; border-left: 4px solid #f39c12;">
                            <p style="font-style: italic;">${data.content.personalMessage}</p>
                        </div>
                        <div style="margin-top: 40px;">
                            <h3>${data.agent.name || 'Your Name'}</h3>
                            <p>${data.agent.company || 'Your Company'}</p>
                            <p>📱 ${data.agent.phone || '(000) 000-0000'}</p>
                            <p>✉️ ${data.agent.email || 'your@email.com'}</p>
                        </div>
                    </div>
                `;
            }
        }
    }

    /**
     * Update month display
     */
    updateMonthDisplay() {
        const data = this.modules.data.getData();
        const month = data.content.newsletterSeason || 'august';
        const monthName = month.charAt(0).toUpperCase() + month.slice(1);
        
        const monthElement = DOMHelpers.findElement('#currentMonth');
        if (monthElement) {
            monthElement.textContent = `${monthName} 2025 Edition`;
        }
    }

    /**
     * Update preview status
     */
    updatePreviewStatus() {
        const statusEl = DOMHelpers.findElement('#previewStatus');
        if (!statusEl) return;
        
        const data = this.modules.data.getData();
        const hasName = data.agent.name && data.agent.name.trim();
        const hasMessage = data.content.personalMessage && data.content.personalMessage.trim();
        const hasStats = data.stats.avgPrice || data.stats.homesSold;
        
        if (hasName && hasMessage && hasStats) {
            statusEl.textContent = '✅ Your newsletter is ready! Use Export Options below to share it.';
            statusEl.style.color = 'var(--success-color)';
        } else if (hasMessage || hasName) {
            statusEl.textContent = 'Instructions to build a custom Newsletter';
            statusEl.style.color = 'var(--primary-color)';
        } else {
            statusEl.textContent = '📝 Start filling out the form to see your newsletter preview';
            statusEl.style.color = 'var(--text-muted)';
        }
    }

    /**
     * Render stats (basic implementation)
     */
    renderStats() {
        const container = DOMHelpers.findElement('#statsGrid');
        if (!container) return;
        
        const data = this.modules.data.getData();
        const stats = data.stats;
        
        const statsConfig = [
            { id: 'avgPrice', label: 'Total Residential Price', field: 'avgPrice' },
            { id: 'priceChange', label: 'Price Change Y/Y', field: 'priceChange' },
            { id: 'homesSold', label: 'Total Sales', field: 'homesSold' },
            { id: 'salesChange', label: 'Sales Change Y/Y', field: 'salesChange' }
        ];
        
        container.innerHTML = statsConfig.map(stat => `
            <div class="stat-item">
                <label class="stat-item__label">${stat.label}</label>
                <input type="text" class="stat-item__input" name="${stat.id}" value="${stats[stat.field] || ''}" 
                       oninput="app.updateStat('${stat.field}', this.value)">
            </div>
        `).join('');
    }

    /**
     * Update stat value
     */
    updateStat(field, value) {
        this.modules.data.updateData(`stats.${field}`, value);
    }

    /**
     * Update events list
     */
    updateEventsList() {
        const container = DOMHelpers.findElement('#customEventsList');
        if (!container) return;
        
        const data = this.modules.data.getData();
        const events = data.customEvents || [];
        
        if (events.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 20px; color: var(--text-muted); font-style: italic;">
                    No events added yet
                </div>
            `;
            return;
        }
        
        container.innerHTML = events.map(event => `
            <div class="event-item">
                <button class="event-delete" onclick="app.deleteEvent('${event.id}')" title="Delete event">×</button>
                <div>
                    <h4>${event.title}</h4>
                    <p>${event.date}${event.startTime ? ` • ${event.startTime}` : ''}</p>
                    ${event.location ? `<p>📍 ${event.location}</p>` : ''}
                </div>
            </div>
        `).join('');
    }

    /**
     * Delete event
     */
    deleteEvent(eventId) {
        if (confirm('Are you sure you want to delete this event?')) {
            if (this.modules.data.removeEvent(eventId)) {
                this.updateEventsList();
                this.updatePreview();
                DOMHelpers.showToast('Event deleted successfully', 'success');
            }
        }
    }

    /**
     * Render maintenance tips summary
     */
    renderMaintenanceTipsSummary() {
        const container = DOMHelpers.findElement('#maintenanceTipsSummary');
        if (!container) return;
        
        const data = this.modules.data.getData();
        const tips = data.maintenanceTips || [];
        
        if (tips.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 15px; color: var(--text-muted); font-style: italic;">
                    No maintenance tips added yet
                </div>
            `;
            return;
        }
        
        const tipCount = tips.length;
        const firstFewTips = tips.slice(0, 3);
        
        container.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong style="color: var(--primary-color);">${tipCount} Maintenance Tip${tipCount !== 1 ? 's' : ''}</strong>
            </div>
            <div style="font-size: 13px; line-height: 1.4;">
                ${firstFewTips.map(tip => `<div style="margin-bottom: 5px; color: var(--text-muted);">${tip}</div>`).join('')}
                ${tipCount > 3 ? `<div style="color: var(--text-secondary); font-style: italic; margin-top: 8px;">...and ${tipCount - 3} more tip${tipCount - 3 !== 1 ? 's' : ''}</div>` : ''}
            </div>
        `;
    }

    /**
     * Apply color preset
     */
    applyColorPreset(presetName) {
        if (this.modules.data.applyColorPreset(presetName)) {
            const displayName = presetName === 'royallepage' ? 'Royal LePage' : 
                               presetName.charAt(0).toUpperCase() + presetName.slice(1);
            DOMHelpers.showToast(`🎨 Applied ${displayName} color preset!`, 'success', 3000);
        }
    }

    /**
     * Show welcome message
     */
    showWelcomeMessage() {
        console.log('💡 Newsletter Builder Pro:');
        console.log('• Click the "?" button in the preview area for step-by-step instructions');
        console.log('• Use Ctrl/Cmd + Enter to generate newsletter');
        console.log('• 📧 IMPORTANT: Images are simulated - in production, upload to your own image hosting');
        console.log('• 🎨 Color customization organized by section with 9 preset themes including Royal LePage!');
        console.log('• 📐 Colors: Global design → Smart buttons → Property types');
        console.log('• 🏠 Property types: Click names to edit, use delete button to remove');
        console.log('• 🔗 Smart Buttons: Toggle on/off and customize names for each button');
        console.log('• 🔧 Maintenance tips: Modal interface with emoji picker, edit and delete capabilities');
        
        DOMHelpers.showToast('Newsletter Builder Pro loaded successfully!', 'success', 3000);
    }
}

// Initialize application when DOM is ready
DOMHelpers.ready(() => {
    window.app = new NewsletterApp();
    window.app.init();
});

// Export for module use
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NewsletterApp;
}
